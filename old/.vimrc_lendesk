set nocompatible
syntax on
filetype plugin indent on

if has('gui_running')
    set guioptions-=T
    colo desert
    set guifont=Cousine
endif

set enc=utf-8
set fileencoding=utf-8
set expandtab
set shiftwidth=2
set tabstop=2
set smarttab
set autochdir
set tw=0
set hlsearch

set backupdir=/Users/grellyd/tmp
set directory=/Users/grellyd/tmp
set undodir=/Users/grellyd/tmp

set noacd

set showcmd
set autoindent

set wildmenu
set wildmode=list:longest,full

set number

set ignorecase
set smartcase

set encoding=utf-8

set diffopt=vertical

inoremap jj <Esc>
"inoremap { {<CR>}<Esc>O
nnoremap JJJJ <Nop>
nnoremap <Space> a_<Esc>r
nnoremap <C-Space> i_<Esc>r
nnoremap <Enter> i<Enter><Esc>0
nnoremap <C-Enter> a<Enter><Esc>
nnoremap <C-P> :FZF<CR>
"nnoremap <Tab> i<Tab><Esc>
nnoremap <F2> :!make <CR>
nnoremap <S-F2> :vnew \| :read !make <CR>
nnoremap <C-F2> :tabnew \| :read !make <CR>
"nnoremap <S-F3> :!java -agentlib:jdwp=transport=dt_shmem,server=y,suspend=n "CSdict"
"nnoremap <F3> :!gcc -S % <CR>
nnoremap <F3> :!ruby % <CR>
nnoremap <S-F3> :vnew \| :read !ruby lib/broker_registry_scraper/general_runner.rb
nnoremap <C-F3> :vnew \| :set buftype=nofile \| :set bufhidden=hide \| :set noswap \| :read !rspec spec/lib/broker_registry_scraper  <CR>
"nnoremap <S-F3> :call delete(expand("%")) \| bdelete!
"nnoremap <F4> :!python -m tests.document_classifier_service.run_tests <CR>
"nnoremap <S-F4> :vnew \| :read !python -m tests.document_classifier_service.run_tests  <CR>
nnoremap <C-F4> :tabnew \| :read !python # <CR>
nnoremap <F7> :%s/\s\+$//e <CR>

" :vnew \| :set buftype=nofile \| :set bufhidden=hide \| :set noswap \| :read !python -m tests.document_classifier.run_tests <CR>


" :vnew \| :set buftype=nofile \| :set bufhidden=hide \| :set noswap \| :read !python -m tests.document_classifier.run_tests <CR>

nnoremap <F4> :!python -m tests.service.run_tests <CR>

nnoremap <S-F4> :vnew \| :set buftype=nofile \| :set bufhidden=hide \| :set noswapfile \| :read !python -m tests.service.run_tests <CR>

nnoremap <c-F4> :tabnew \| :set buftype=nofile \| :set bufhidden=hide \| :set noswapfile \| :read !python -m tests.service.run_tests <CR>
inoremap <F8> :'<,'>s/^/^# /g <CR>



" ============== "
"    Pathogen
" ============== "
execute pathogen#infect()
execute pathogen#helptags()

" ============== "
"    NERDTree
" ============== "

nnoremap <F5> :NERDTreeToggle<CR>
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
"let g:NERDTreeDirArrowExpandable = '-->'
"let g:NERDTreeDirArrowCollapsible = '^_^'
let NERDTreeIgnore = ['.pyc$']

" ============== "
"     Tagbar
" ============== "
nnoremap <F6> :TagbarToggle<CR>


" ============== "
"     Taboo
" ============== "
let g:taboo_tab_format = "[%N] %f"


" ============== "
"   UltiSnips
" ============== "
"let g:UltiSnipsExpandTrigger = <F8>

" ============== "
"      ale
" ============== "
let g:ale_lint_on_text_changed = 0
let g:ale_lint_on_save = 1


" ============== "
"      fzf
" ============== "
set rtp+=/usr/local/opt/fzf
let g:fzf_launcher = "PATH_TO_THE_SCRIPT_FILE %s"
" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" Default fzf layout
" - down / up / left / right
let g:fzf_layout = { 'down': '~40%' }

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'
